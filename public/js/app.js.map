{"version":3,"sources":["app/BattleWave.coffee","app/src/Clock.coffee","app/src/Drawable.coffee","app/src/Particle.coffee","app/src/Player.coffee","app/src/Surface.coffee","app/src/Utils.coffee","app/src/WarpGrid.coffee","app/src/Wave.coffee","node_modules/auto-reload-brunch/vendor/auto-reload.js"],"names":[],"mappingshCA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnvxJA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlrIA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlFA;AAAA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"public/js/app.js","sourcesContent":["\"use strict\";\nvar BattleWave, Clock, Player, Surface, WarpGrid;\n\nClock = require('src/Clock');\n\nSurface = require('src/Surface');\n\nWarpGrid = require('src/WarpGrid');\n\nPlayer = require('src/Player');\n\nwindow.CanvasRenderingContext2D.prototype.polygon = function(x, y, radius, sides) {\n  var angle, i, j, ref;\n  if (sides > 2) {\n    for (i = j = 0, ref = sides; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n      angle = (Math.PI * 2 / sides * i) - Math.PI / 2;\n      this.lineTo(Math.cos(angle) * radius + x, Math.sin(angle) * radius + y);\n    }\n    angle = (Math.PI * 2 / sides * sides) - Math.PI / 2;\n    return this.lineTo(Math.cos(angle) * radius + x, Math.sin(angle) * radius + y);\n  } else {\n    return this.arc(x, y, radius, 0, 2 * Math.PI);\n  }\n};\n\nmodule.exports = BattleWave = (function() {\n  function BattleWave(target1) {\n    var keyboard;\n    this.target = target1;\n    this.clock = new Clock();\n    this.surface = new Surface(this.target, this);\n    this.loopId = null;\n    this.audio = null;\n    this.crtOff = new Audio('../sfx/crt_off.ogg');\n    this.crtOff.crossOrigin = \"anonymous\";\n    this.crtOn = new Audio('../sfx/crt_on.ogg');\n    this.crtOn.crossOrigin = \"anonymous\";\n    this.playerOne = new Player(1);\n    this.playerTwo = new Player(2);\n    this.surface.add(this.playerOne);\n    this.surface.add(this.playerTwo);\n    this.surface.playerOne = this.playerOne;\n    this.surface.playerTwo = this.playerTwo;\n    keyboard = [];\n    window.$keyboard = keyboard;\n  }\n\n  BattleWave.prototype.deltaTime = function() {\n    return this.clock.deltaTime();\n  };\n\n  BattleWave.prototype.start = function() {\n    console.log('[BattleWave] Starting');\n    this.audio = new Audio('../bgm/bgm.ogg');\n    this.audio.crossOrigin = \"anonymous\";\n    this.audio.play();\n    this.crtOn.play();\n    return this.loopId = requestAnimationFrame(this.gameLoop.bind(this));\n  };\n\n  BattleWave.prototype.stop = function() {\n    console.log('[BattleWave] Stopping');\n    return cancelAnimationFrame(this.loopId);\n  };\n\n  BattleWave.prototype.gameLoop = function() {\n    this.surface.clear();\n    this.surface.render();\n    return this.loopId = requestAnimationFrame(this.gameLoop.bind(this));\n  };\n\n  return BattleWave;\n\n})();\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  var bw, target;\n  console.log('[BattleWave] Initializing');\n  target = document.getElementById('target');\n  bw = new BattleWave(target);\n  bw.start();\n  window.addEventListener('keydown', function(e) {\n    var key;\n    key = e.keyCode || e.which;\n    return window.$keyboard[key] = true;\n  });\n  return window.addEventListener('keyup', function(e) {\n    var key;\n    key = e.keyCode || e.which;\n    return window.$keyboard[key] = false;\n  });\n});\n","\"use strict\";\nvar Clock;\n\nmodule.exports = Clock = (function() {\n  var getCurrentTime;\n\n  function Clock() {\n    this.time = getCurrentTime();\n  }\n\n  Clock.prototype.deltaTime = function() {\n    var delta, now;\n    now = getCurrentTime();\n    delta = now - this.time;\n    this.time = now;\n    return delta / 1000;\n  };\n\n  getCurrentTime = function() {\n    return (new Date()).getTime();\n  };\n\n  Clock.prototype.getElapsedTime = function() {\n    var delta, now;\n    now = getCurrentTime();\n    delta = now - this.time;\n    return delta / 1000;\n  };\n\n  return Clock;\n\n})();\n","\"use strict\";\nvar Drawable;\n\nmodule.exports = Drawable = (function() {\n  function Drawable() {\n    null;\n  }\n\n  Drawable.prototype.draw = function(surface) {\n    return null;\n  };\n\n  return Drawable;\n\n})();\n","\"usr strict\";\nvar Particle, Utils;\n\nUtils = require('src/Utils');\n\nmodule.exports = Particle = (function() {\n  function Particle(x, y, speed, angle) {\n    this.pos = {\n      x: x,\n      y: y\n    };\n    this.velocity = {\n      x: 0,\n      y: 0\n    };\n    this.friction = 0.95;\n    this.vx = 1;\n    this.vy = 1;\n    this.alpha = 1;\n    this.gravity = false;\n    this.color = 'white';\n    this.radius = 2;\n    this.setHeading(angle);\n    this.setSpeed(speed);\n  }\n\n  Particle.prototype.getPos = function() {\n    return this.pos;\n  };\n\n  Particle.prototype.getSpeed = function() {\n    return Math.sqrt(Math.pow(this.velocity.x, 2), Math.pow(this.velocity.y, 2));\n  };\n\n  Particle.prototype.setSpeed = function(speed) {\n    var heading;\n    heading = this.getHeading();\n    this.velocity.x = Math.cos(heading) * speed;\n    return this.velocity.y = Math.sin(heading) * speed;\n  };\n\n  Particle.prototype.getHeading = function() {\n    return Math.atan2(this.velocity.y, this.velocity.x);\n  };\n\n  Particle.prototype.setHeading = function(heading) {\n    var speed;\n    speed = this.getSpeed();\n    this.velocity.x = Math.cos(heading) * speed;\n    return this.velocity.y = Math.sin(heading) * speed;\n  };\n\n  Particle.prototype.angleTo = function(other) {\n    return Math.atan2(other.pos.y - this.pos.y, other.pos.x - this.pos.x);\n  };\n\n  Particle.prototype.draw = function(ctx) {\n    ctx.globalAlpha = this.alpha;\n    ctx.save();\n    ctx.translate(this.pos.x, this.pos.y);\n    ctx.rotate(this.getHeading());\n    ctx.beginPath();\n    ctx.fillStyle = this.color;\n    ctx.polygon(0, 0, Math.min(this.radius * ((Math.abs(this.velocity.x) * Math.abs(this.velocity.y)) / 8), 6), 0);\n    ctx.fill();\n    ctx.restore();\n    return ctx.globalAlpha = 1;\n  };\n\n  Particle.prototype.render = function() {\n    this.update();\n    if (this.spring != null) {\n      return this.updateSpring(this.target);\n    }\n  };\n\n  Particle.prototype.update = function() {\n    this.velocity.x *= this.friction;\n    this.velocity.y *= this.friction;\n    this.pos.x += this.velocity.x;\n    return this.pos.y += this.velocity.y;\n  };\n\n  Particle.prototype.setSpring = function(target) {\n    this.target = target;\n    this.k = 0.1;\n    this.springLength = 0.8;\n    this.friction = 0.90;\n    return this.spring = true;\n  };\n\n  Particle.prototype.updateSpring = function() {\n    var ax, ay, distance, dx, dy, springForce;\n    dx = this.target.pos.x - this.pos.x;\n    dy = this.target.pos.y - this.pos.y;\n    distance = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n    springForce = (distance - this.springLength) * this.k;\n    ax = dx / distance * springForce;\n    ay = dy / distance * springForce;\n    this.velocity.x += ax;\n    return this.velocity.y += ay;\n  };\n\n  Particle.prototype.warp = function(target) {\n    if (Utils.distance(this, target) < target.getSpeed() * 10 && Utils.distance(this, this.target) < 30) {\n      this.setHeading(Utils.getAngle(target, this));\n      if (Utils.distance(this, target) < 70) {\n        return this.setSpeed(target.getSpeed());\n      }\n    }\n  };\n\n  return Particle;\n\n})();\n","\"use strict\";\nvar Clock, Player, Utils, Wave;\n\nClock = require('src/Clock');\n\nWave = require('src/Wave');\n\nUtils = require('src/Utils');\n\nmodule.exports = Player = (function() {\n  var COLORS, KEYBOARD, MARGIN, MAX_SPEED, SIZE;\n\n  MARGIN = 60;\n\n  SIZE = 50;\n\n  MAX_SPEED = 600;\n\n  COLORS = [\"#ab52d1\", \"#8a62d7\", \"#6e74df\", \"#5183e4\", \"#3897f2\"];\n\n  KEYBOARD = [\n    {\n      moveUp: [90, 87],\n      moveDown: [83],\n      wave: [68]\n    }, {\n      moveUp: [38],\n      moveDown: [40],\n      wave: [37]\n    }\n  ];\n\n  function Player(playerNumber) {\n    var i, j;\n    this.playerNumber = playerNumber;\n    this.pos = {\n      x: 0,\n      y: window.innerHeight / 2\n    };\n    if (this.playerNumber === 1) {\n      this.pos.x = MARGIN;\n    } else {\n      this.pos.x = window.innerWidth - MARGIN;\n    }\n    this.velocity = {\n      x: 0,\n      y: 0\n    };\n    this.friction = 0.1;\n    this.angle = 0;\n    this.colors = COLORS;\n    if (this.playerNumber === 2) {\n      this.colors = Object.create(COLORS).reverse();\n    }\n    this.drawClock = new Clock();\n    this.cooldown = new Clock();\n    this.immunityClock = new Clock();\n    this.isHit = false;\n    this.dead = false;\n    this.gui = document.querySelector(\".hp.\" + (this.getClass()));\n    this.deadSpeed = 300;\n    this.hitAudio = new Audio('../sfx/hit.ogg');\n    this.hitAudio.crossOrigin = \"anonymous\";\n    this.hitAudio.volume = 0.3;\n    this.deadAudio = new Audio('../sfx/dead.ogg');\n    this.deadAudio.crossOrigin = \"anonymous\";\n    this.deadAudio.volume = 0.4;\n    this.hp = 5;\n    this.waveAudio = new Audio('../sfx/wave.ogg');\n    this.waveAudio.crossOrigin = \"anonymous\";\n    this.waveAudio.volume = 0.4;\n    this.waves = [];\n    for (i = j = 0; j <= 10; i = ++j) {\n      this.waves.push(new Wave(0, 0));\n    }\n  }\n\n  Player.prototype.getClass = function() {\n    if (this.playerNumber === 1) {\n      return \"playerOne\";\n    } else {\n      return \"playerTwo\";\n    }\n  };\n\n  Player.prototype.getSpeed = function() {\n    var speed;\n    speed = Math.abs(this.velocity.y / 100);\n    if (this.dead) {\n      speed = this.deadSpeed;\n      this.deadSpeed = Math.max(this.deadSpeed - 0.01, 0);\n    }\n    return speed;\n  };\n\n  Player.prototype.getDamage = function() {\n    var letters;\n    if (this.dead) {\n      return;\n    }\n    if (this.isHit && this.immunityClock.getElapsedTime() < 2) {\n      return;\n    }\n    this.hp -= 1;\n    this.dead = this.hp <= 0;\n    if (this.dead) {\n      this.deadAudio.play();\n    } else {\n      this.hitAudio.play();\n    }\n    console.log(\"Aww! Only \" + this.hp + \" HP left\");\n    this.immunityClock.deltaTime();\n    this.isHit = true;\n    letters = this.gui.querySelectorAll('span:not(.out)');\n    if (letters[letters.length - 1]) {\n      return letters[letters.length - 1].classList.add('out');\n    }\n  };\n\n  Player.prototype.moveUp = function() {\n    this.velocity.y -= 50;\n    if (this.velocity.y < -MAX_SPEED) {\n      return this.velocity.y = -MAX_SPEED;\n    }\n  };\n\n  Player.prototype.moveDown = function() {\n    this.velocity.y += 50;\n    if (this.velocity.y > MAX_SPEED) {\n      return this.velocity.y = MAX_SPEED;\n    }\n  };\n\n  Player.prototype.wave = function() {\n    var j, len, ref, results, wave;\n    if (this.cooldown.getElapsedTime() < 1) {\n      return;\n    }\n    this.cooldown.deltaTime();\n    ref = this.waves;\n    results = [];\n    for (j = 0, len = ref.length; j < len; j++) {\n      wave = ref[j];\n      if (!wave.alive) {\n        wave.originateFrom(this).shootTo(this.playerNumber);\n        this.waveAudio.play();\n        break;\n      } else {\n        results.push(void 0);\n      }\n    }\n    return results;\n  };\n\n  Player.prototype.update = function() {\n    var dir, kb, key, results;\n    if (this.dead) {\n      return;\n    }\n    kb = window.$keyboard;\n    results = [];\n    for (dir in KEYBOARD[this.playerNumber - 1]) {\n      results.push((function() {\n        var j, len, ref, results1;\n        ref = KEYBOARD[this.playerNumber - 1][dir];\n        results1 = [];\n        for (j = 0, len = ref.length; j < len; j++) {\n          key = ref[j];\n          if (kb[key]) {\n            this[dir]();\n            break;\n          } else {\n            results1.push(void 0);\n          }\n        }\n        return results1;\n      }).call(this));\n    }\n    return results;\n  };\n\n  Player.prototype.hasKeyPressed = function() {\n    var dir, j, key, len, ref;\n    for (dir in KEYBOARD[this.playerNumber - 1]) {\n      ref = KEYBOARD[this.playerNumber - 1][dir];\n      for (j = 0, len = ref.length; j < len; j++) {\n        key = ref[j];\n        if (dir === 'wave') {\n          continue;\n        }\n        if (window.$keyboard[key]) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  Player.prototype.clampYPos = function() {\n    if (this.pos.y < MARGIN) {\n      this.pos.y = MARGIN;\n    }\n    if (this.pos.y > window.innerHeight - MARGIN) {\n      return this.pos.y = window.innerHeight - MARGIN;\n    }\n  };\n\n  Player.prototype.getHitbox = function() {\n    return {\n      pos: this.pos,\n      radius: 40\n    };\n  };\n\n  Player.prototype.draw = function(ctx) {\n    var i, j, k, len, ref, ref1, results, shouldDraw, timeSinceLastFrame, wave;\n    timeSinceLastFrame = this.drawClock.deltaTime();\n    shouldDraw = true;\n    this.angle += (Math.PI / 5) * timeSinceLastFrame;\n    this.angle = this.angle % (2 * Math.PI);\n    this.update();\n    this.pos.y += this.velocity.y * timeSinceLastFrame;\n    this.clampYPos();\n    if (!this.hasKeyPressed()) {\n      this.velocity.y *= this.friction * timeSinceLastFrame;\n    }\n    if (this.isHit && this.immunityClock.getElapsedTime() < 3) {\n      shouldDraw = ((this.immunityClock.getElapsedTime() * 1000) % 300) < 150;\n    } else {\n      this.isHit = false;\n    }\n    if (shouldDraw && !this.dead) {\n      ctx.save();\n      ctx.globalAlpha = 1;\n      ctx.lineWidth = 2.5;\n      ctx.translate(this.pos.x, this.pos.y);\n      for (i = j = 0, ref = SIZE / 10; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n        ctx.save();\n        if (i % 2 === 0) {\n          ctx.rotate(this.angle);\n        } else {\n          ctx.rotate(-this.angle);\n        }\n        ctx.beginPath();\n        ctx.strokeStyle = this.colors[i];\n        ctx.polygon(0, 0, SIZE - (i * 10), 6 - i);\n        ctx.stroke();\n        ctx.restore();\n      }\n      ctx.restore();\n    }\n    ref1 = this.waves;\n    results = [];\n    for (k = 0, len = ref1.length; k < len; k++) {\n      wave = ref1[k];\n      results.push(wave.draw());\n    }\n    return results;\n  };\n\n  return Player;\n\n})();\n","\"use strict\";\nvar Clock, Surface, Utils, WarpGrid;\n\nWarpGrid = require('src/WarpGrid');\n\nClock = require('src/Clock');\n\nUtils = require('src/Utils');\n\nmodule.exports = Surface = (function() {\n  var TIE_MESSAGES, WIN_MESSAGES, registerResize, resizeScene;\n\n  WIN_MESSAGES = [\"WINS\", \"KILLED IT\", \"ROCKS\", \"IS RAD\", \"IS DOPE\", \"IS KICKIN'\"];\n\n  TIE_MESSAGES = [[\"NICE\", \"PLAY\", \"SHAKESPEARE\"], [\"LIKE,\", \"OH MY\", \"GOD!\"], [\"EAT\", \"MY\", \"SHORTS\"], [\"WELL AINT\", \"THAT JUST\", \"GREAT\"], [\"YA BUNCH\", \"OF\", \"HOSERS\"], [\"OH\", \"MY,\", \"DAYUM!\"]];\n\n  function Surface(target, gameInstance) {\n    this.target = target;\n    this.gameInstance = gameInstance;\n    this.canvas = document.createElement('CANVAS');\n    this.target.appendChild(this.canvas);\n    this.message = document.getElementById('message');\n    this.context = this.canvas.getContext('2d');\n    this.objects = [];\n    this.playerOne = null;\n    this.playerTwo = null;\n    this.hasDeath = false;\n    this.deathTimeout = new Clock();\n    (registerResize.bind(this))();\n    (resizeScene.bind(this))(window);\n    this.grid = new WarpGrid(this.width(), this.height());\n    this.background = this.context.createLinearGradient(0, this.height() / 2, this.width(), this.height() / 2);\n    this.background.addColorStop(0, \"#07274f\");\n    this.background.addColorStop(1, \"#501644\");\n    this.vignette = this.context.createRadialGradient(this.width() / 2, this.height() / 2, 100, this.width() / 2, this.height() / 2, this.width() / 2);\n    this.vignette.addColorStop(0, \"transparent\");\n    this.vignette.addColorStop(1, \"rgba(0, 0, 0, .4)\");\n  }\n\n  Surface.prototype.width = function() {\n    return this.canvas.width;\n  };\n\n  Surface.prototype.height = function() {\n    return this.canvas.height;\n  };\n\n  Surface.prototype.clear = function() {\n    return this.context.clearRect(0, 0, this.width(), this.height());\n  };\n\n  Surface.prototype.add = function(obj) {\n    return this.objects.push(obj);\n  };\n\n  Surface.prototype.checkForDeath = function() {\n    if (this.hasDeath) {\n      return;\n    }\n    if (this.playerOne.dead || this.playerTwo.dead) {\n      this.hasDeath = true;\n      return this.deathTimeout.deltaTime();\n    }\n  };\n\n  Surface.prototype.displayWinMessage = function() {\n    var _this, lineOne, lineThree, lineTwo, msg;\n    if (this.message.classList.contains('visible')) {\n      return;\n    }\n    lineOne = this.message.getElementsByClassName('one')[0];\n    lineTwo = this.message.getElementsByClassName('two')[0];\n    lineThree = this.message.getElementsByClassName('three')[0];\n    if (this.playerOne.dead && this.playerTwo.dead) {\n      msg = Utils.randomElement(TIE_MESSAGES);\n      lineOne.innerHTML = msg[0];\n      lineTwo.innerHTML = msg[1];\n      lineThree.innerHTML = msg[2];\n    } else if (this.playerOne.dead) {\n      lineOne.innerHTML = \"PLAYER\";\n      lineTwo.innerHTML = \"TWO\";\n      lineThree.innerHTML = Utils.randomElement(WIN_MESSAGES);\n    } else {\n      lineOne.innerHTML = \"PLAYER\";\n      lineTwo.innerHTML = \"ONE\";\n      lineThree.innerHTML = Utils.randomElement(WIN_MESSAGES);\n    }\n    this.message.classList.add('visible');\n    _this = this;\n    return window.addEventListener('keydown', function(e) {\n      var key;\n      key = e.keyCode || e.which;\n      if (_this.target.classList.contains('off')) {\n        return;\n      }\n      if (key === 32 || key === 13) {\n        _this.target.classList.add('off');\n        if (_this.gameInstance.audio) {\n          _this.gameInstance.audio.pause();\n        }\n        if (_this.gameInstance.crtOff) {\n          _this.gameInstance.crtOff.play();\n        }\n        return setTimeout((function() {\n          return window.location.reload(false);\n        }), 3000);\n      }\n    });\n  };\n\n  Surface.prototype.render = function() {\n    var i, len, obj, ref;\n    this.context.save();\n    this.context.fillStyle = this.background;\n    this.context.fillRect(0, 0, this.width(), this.height());\n    this.grid.draw(this.context, this.playerOne, this.playerTwo);\n    ref = this.objects;\n    for (i = 0, len = ref.length; i < len; i++) {\n      obj = ref[i];\n      obj.draw(this.context);\n    }\n    this.context.restore();\n    this.context.fillStyle = this.vignette;\n    this.context.fillRect(0, 0, this.width(), this.height());\n    if ((this.playerOne != null) && (this.playerTwo != null)) {\n      this.checkForDeath();\n    }\n    if (this.hasDeath && this.deathTimeout.getElapsedTime() > 3) {\n      return this.displayWinMessage();\n    }\n  };\n\n  resizeScene = function(win) {\n    var height, width;\n    console.log('[Surface] Resizing');\n    height = win.innerHeight;\n    width = win.innerWidth;\n    this.canvas.width = width;\n    return this.canvas.height = height;\n  };\n\n  registerResize = function() {\n    var _this;\n    _this = this;\n    return window.addEventListener('resize', function(e) {\n      return (resizeScene.bind(_this))(e.target);\n    });\n  };\n\n  return Surface;\n\n})();\n","\"use strict\";\nvar Utils;\n\nmodule.exports = Utils = (function() {\n  function Utils() {}\n\n  Utils.norm = function(val, min, max) {\n    return (val - min) / (max - min);\n  };\n\n  Utils.lerp = function(norm, min, max) {\n    return (max - min) * norm + min;\n  };\n\n  Utils.clamp = function(val, min, max) {\n    return Math.min(Math.max(value, max), min);\n  };\n\n  Utils.distance = function(left, right) {\n    var dx, dy;\n    dx = right.pos.x - left.pos.x;\n    dy = right.pos.y - left.pos.y;\n    return Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n  };\n\n  Utils.getAngle = function(left, right) {\n    var dx, dy;\n    dx = right.pos.x - left.pos.x;\n    dy = right.pos.y - left.pos.y;\n    return Math.atan2(dy, dx);\n  };\n\n  Utils.intersects = function(colliderOne, colliderTwo) {\n    var centerDist, deltaRadii, sumRadii;\n    deltaRadii = Math.pow(colliderOne.radius - colliderTwo.radius, 2);\n    sumRadii = Math.pow(colliderOne.radius + colliderTwo.radius, 2);\n    centerDist = Math.pow(colliderOne.pos.x - colliderTwo.pos.x, 2) + Math.pow(colliderOne.pos.y - colliderTwo.pos.y, 2);\n    return deltaRadii < centerDist && centerDist < sumRadii;\n  };\n\n  Utils.randomElement = function(array) {\n    var len, rand;\n    len = array.length;\n    rand = Math.floor(Math.random() * len);\n    return array[rand];\n  };\n\n  return Utils;\n\n})();\n","\"use strict\";\nvar Particle, Utils, WarpGrid;\n\nParticle = require('src/Particle');\n\nUtils = require('src/Utils');\n\nmodule.exports = WarpGrid = (function() {\n  WarpGrid.GRID_COUNT = 50;\n\n  WarpGrid.prototype.type = \"WarpGrid\";\n\n  function WarpGrid(size) {\n    var i, j, particle, ref, ref1, row, x, y;\n    this.particles = [];\n    for (y = i = 0, ref = WarpGrid.GRID_COUNT; 0 <= ref ? i <= ref : i >= ref; y = 0 <= ref ? ++i : --i) {\n      row = [];\n      for (x = j = 0, ref1 = WarpGrid.GRID_COUNT; 0 <= ref1 ? j <= ref1 : j >= ref1; x = 0 <= ref1 ? ++j : --j) {\n        particle = new Particle(x * (size / WarpGrid.GRID_COUNT), y * (size / WarpGrid.GRID_COUNT), 1, 0);\n        particle.target = {\n          pos: {\n            x: x * (size / WarpGrid.GRID_COUNT),\n            y: y * (size / WarpGrid.GRID_COUNT)\n          }\n        };\n        particle.setSpring(particle.target);\n        particle.k = 0.01;\n        particle.springLength = 0.1;\n        particle.friction = 0.7;\n        particle.radius = .5;\n        particle.color = '#a5d4de';\n        row.push(particle);\n      }\n      this.particles.push(row);\n    }\n  }\n\n  WarpGrid.prototype.collide = function(playerOne, playerTwo) {\n    var i, j, len, len1, p1Collider, p2Collider, ref, ref1, results, wave, wcollider;\n    p1Collider = playerOne.getHitbox();\n    p2Collider = playerTwo.getHitbox();\n    ref = playerTwo.waves;\n    for (i = 0, len = ref.length; i < len; i++) {\n      wave = ref[i];\n      if (!wave.alive) {\n        continue;\n      }\n      wcollider = wave.getHitbox();\n      if (Utils.intersects(p1Collider, wcollider)) {\n        playerOne.getDamage();\n        break;\n      }\n    }\n    ref1 = playerOne.waves;\n    results = [];\n    for (j = 0, len1 = ref1.length; j < len1; j++) {\n      wave = ref1[j];\n      if (!wave.alive) {\n        continue;\n      }\n      wcollider = wave.getHitbox();\n      if (Utils.intersects(p2Collider, wcollider)) {\n        playerTwo.getDamage();\n        break;\n      } else {\n        results.push(void 0);\n      }\n    }\n    return results;\n  };\n\n  WarpGrid.prototype.draw = function(ctx, playerOne, playerTwo) {\n    var bottom, hue, i, particle, ref, results, right, wave, x, y;\n    results = [];\n    for (y = i = 0, ref = WarpGrid.GRID_COUNT; 0 <= ref ? i <= ref : i >= ref; y = 0 <= ref ? ++i : --i) {\n      results.push((function() {\n        var j, k, l, len, len1, ref1, ref2, ref3, results1;\n        results1 = [];\n        for (x = j = 0, ref1 = WarpGrid.GRID_COUNT; 0 <= ref1 ? j <= ref1 : j >= ref1; x = 0 <= ref1 ? ++j : --j) {\n          particle = this.particles[y][x];\n          right = null;\n          if (x + 1 <= WarpGrid.GRID_COUNT) {\n            right = this.particles[y][x + 1];\n          }\n          bottom = null;\n          if (y + 1 <= WarpGrid.GRID_COUNT) {\n            bottom = this.particles[y + 1][x];\n          }\n          ctx.lineWidth = 1;\n          ctx.globalAlpha = 0.1 + particle.getSpeed();\n          hue = (220 + particle.getSpeed() * 20) % 360;\n          ctx.strokeStyle = \"hsl(\" + hue + \", 50%, 50%)\";\n          if (right != null) {\n            ctx.beginPath();\n            ctx.moveTo(particle.pos.x, particle.pos.y);\n            ctx.lineTo(right.pos.x, right.pos.y);\n            ctx.closePath();\n            ctx.stroke();\n          }\n          if (bottom != null) {\n            ctx.beginPath();\n            ctx.moveTo(particle.pos.x, particle.pos.y);\n            ctx.lineTo(bottom.pos.x, bottom.pos.y);\n            ctx.closePath();\n            ctx.stroke();\n          }\n          ctx.globalAlpha = 1;\n          ctx.fillStyle = 'white';\n          particle.draw(ctx);\n          particle.render();\n          particle.warp(playerOne);\n          particle.warp(playerTwo);\n          ref2 = playerOne.waves;\n          for (k = 0, len = ref2.length; k < len; k++) {\n            wave = ref2[k];\n            particle.warp(wave);\n          }\n          ref3 = playerTwo.waves;\n          for (l = 0, len1 = ref3.length; l < len1; l++) {\n            wave = ref3[l];\n            particle.warp(wave);\n          }\n          results1.push(this.collide(playerOne, playerTwo));\n        }\n        return results1;\n      }).call(this));\n    }\n    return results;\n  };\n\n  return WarpGrid;\n\n})();\n","\"use strict\";\nvar Clock, Wave;\n\nClock = require('src/Clock');\n\nmodule.exports = Wave = (function() {\n  var WAVE_SPEED;\n\n  WAVE_SPEED = 1000;\n\n  function Wave(x, y) {\n    this.pos = {\n      x: x,\n      y: y\n    };\n    this.velocity = {\n      x: 0,\n      y: 0\n    };\n    this.alive = false;\n    this.clock = new Clock();\n  }\n\n  Wave.prototype.originateFrom = function(origin) {\n    this.pos.x = origin.pos.x;\n    this.pos.y = origin.pos.y;\n    this.velocity.y = origin.velocity.y / 5;\n    return this;\n  };\n\n  Wave.prototype.shootTo = function(direction) {\n    this.alive = true;\n    this.velocity.x = WAVE_SPEED;\n    if (direction === 2) {\n      this.velocity.x = -this.velocity.x;\n    }\n    return this;\n  };\n\n  Wave.prototype.getSpeed = function() {\n    if (!this.alive) {\n      return 0;\n    }\n    return 10;\n  };\n\n  Wave.prototype.getHitbox = function() {\n    return {\n      pos: this.pos,\n      radius: 40\n    };\n  };\n\n  Wave.prototype.draw = function() {\n    var timeSinceLastFrame;\n    timeSinceLastFrame = this.clock.deltaTime();\n    if (!this.alive) {\n      return;\n    }\n    this.pos.x += this.velocity.x * timeSinceLastFrame;\n    this.pos.y += this.velocity.y * (timeSinceLastFrame * 10);\n    if (this.pos.y <= 0 || this.pos.y >= window.innerHeight) {\n      this.velocity.y = -this.velocity.y;\n    }\n    if (this.pos.y <= 0) {\n      this.pos.y = 0;\n    }\n    if (this.pos.y >= window.innerHeight) {\n      this.pos.y = window.innerHeight;\n    }\n    if (this.pos.x < 0 || this.pos.x > window.innerWidth) {\n      this.alive = false;\n      return this.velocity = {\n        x: 0,\n        y: 0\n      };\n    }\n  };\n\n  return Wave;\n\n})();\n","/* jshint ignore:start */\n(function() {\n  var WebSocket = window.WebSocket || window.MozWebSocket;\n  var br = window.brunch = (window.brunch || {});\n  var ar = br['auto-reload'] = (br['auto-reload'] || {});\n  if (!WebSocket || ar.disabled) return;\n  if (window._ar) return;\n  window._ar = true;\n\n  var cacheBuster = function(url){\n    var date = Math.round(Date.now() / 1000).toString();\n    url = url.replace(/(\\&|\\\\?)cacheBuster=\\d*/, '');\n    return url + (url.indexOf('?') >= 0 ? '&' : '?') +'cacheBuster=' + date;\n  };\n\n  var browser = navigator.userAgent.toLowerCase();\n  var forceRepaint = ar.forceRepaint || browser.indexOf('chrome') > -1;\n\n  var reloaders = {\n    page: function(){\n      window.location.reload(true);\n    },\n\n    stylesheet: function(){\n      [].slice\n        .call(document.querySelectorAll('link[rel=stylesheet]'))\n        .filter(function(link) {\n          var val = link.getAttribute('data-autoreload');\n          return link.href && val != 'false';\n        })\n        .forEach(function(link) {\n          link.href = cacheBuster(link.href);\n        });\n\n      // Hack to force page repaint after 25ms.\n      if (forceRepaint) setTimeout(function() { document.body.offsetHeight; }, 25);\n    },\n\n    javascript: function(){\n      var scripts = [].slice.call(document.querySelectorAll('script'));\n      var textScripts = scripts.map(function(script) { return script.text }).filter(function(text) { return text.length > 0 });\n      var srcScripts = scripts.filter(function(script) { return script.src });\n\n      var loaded = 0;\n      var all = srcScripts.length;\n      var onLoad = function() {\n        loaded = loaded + 1;\n        if (loaded === all) {\n          textScripts.forEach(function(script) { eval(script); });\n        }\n      }\n\n      srcScripts\n        .forEach(function(script) {\n          var src = script.src;\n          script.remove();\n          var newScript = document.createElement('script');\n          newScript.src = cacheBuster(src);\n          newScript.async = true;\n          newScript.onload = onLoad;\n          document.head.appendChild(newScript);\n        });\n    }\n  };\n  var port = ar.port || 9485;\n  var host = br.server || window.location.hostname || 'localhost';\n\n  var connect = function(){\n    var connection = new WebSocket('ws://' + host + ':' + port);\n    connection.onmessage = function(event){\n      if (ar.disabled) return;\n      var message = event.data;\n      var reloader = reloaders[message] || reloaders.page;\n      reloader();\n    };\n    connection.onerror = function(){\n      if (connection.readyState) connection.close();\n    };\n    connection.onclose = function(){\n      window.setTimeout(connect, 1000);\n    };\n  };\n  connect();\n})();\n/* jshint ignore:end */\n"]}