{"version":3,"sources":["app/BattleWave.coffee","app/src/Clock.coffee","app/src/Drawable.coffee","app/src/Particle.coffee","app/src/Player.coffee","app/src/Surface.coffee","app/src/Utils.coffee","app/src/WarpGrid.coffee","node_modules/auto-reload-brunch/vendor/auto-reload.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9DA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnHA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnnrHA;AAAA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"public/js/app.js","sourcesContent":["\"use strict\";\nvar BattleWave, Clock, Surface, WarpGrid;\n\nClock = require('src/Clock');\n\nSurface = require('src/Surface');\n\nWarpGrid = require('src/WarpGrid');\n\nwindow.CanvasRenderingContext2D.prototype.polygon = function(x, y, radius, sides) {\n  var angle, i, j, ref;\n  if (sides > 2) {\n    for (i = j = 0, ref = sides; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n      angle = (Math.PI * 2 / sides * i) - Math.PI / 2;\n      this.lineTo(Math.cos(angle) * radius + x, Math.sin(angle) * radius + y);\n    }\n    angle = (Math.PI * 2 / sides * sides) - Math.PI / 2;\n    return this.lineTo(Math.cos(angle) * radius + x, Math.sin(angle) * radius + y);\n  } else {\n    return this.arc(x, y, radius, 0, 2 * Math.PI);\n  }\n};\n\nmodule.exports = BattleWave = (function() {\n  function BattleWave(target1) {\n    this.target = target1;\n    this.clock = new Clock();\n    this.surface = new Surface(this.target);\n    this.loopId = null;\n  }\n\n  BattleWave.prototype.deltaTime = function() {\n    return this.clock.deltaTime();\n  };\n\n  BattleWave.prototype.start = function() {\n    console.log('[BattleWave] Starting');\n    return this.loopId = requestAnimationFrame(this.gameLoop.bind(this));\n  };\n\n  BattleWave.prototype.stop = function() {\n    console.log('[BattleWave] Stopping');\n    return cancelAnimationFrame(this.loopId);\n  };\n\n  BattleWave.prototype.gameLoop = function() {\n    this.surface.clear();\n    this.surface.render();\n    return this.loopId = requestAnimationFrame(this.gameLoop.bind(this));\n  };\n\n  return BattleWave;\n\n})();\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  var bw, target;\n  console.log('[BattleWave] Initializing');\n  target = document.getElementById('target');\n  bw = new BattleWave(target);\n  return bw.start();\n});\n","\"use strict\";\nvar Clock;\n\nmodule.exports = Clock = (function() {\n  var getCurrentTime;\n\n  function Clock() {\n    this.time = getCurrentTime();\n  }\n\n  Clock.prototype.deltaTime = function() {\n    var delta, now;\n    now = getCurrentTime();\n    delta = now - this.time;\n    this.time = now;\n    return delta / 1000;\n  };\n\n  getCurrentTime = function() {\n    return (new Date()).getTime();\n  };\n\n  return Clock;\n\n})();\n","\"use strict\";\nvar Drawable;\n\nmodule.exports = Drawable = (function() {\n  function Drawable() {\n    null;\n  }\n\n  Drawable.prototype.draw = function(surface) {\n    return null;\n  };\n\n  return Drawable;\n\n})();\n","\"usr strict\";\nvar Particle, Utils;\n\nUtils = require('src/Utils');\n\nmodule.exports = Particle = (function() {\n  function Particle(x, y, speed, angle) {\n    this.pos = {\n      x: x,\n      y: y\n    };\n    this.velocity = {\n      x: 0,\n      y: 0\n    };\n    this.friction = 0.95;\n    this.vx = 1;\n    this.vy = 1;\n    this.alpha = 1;\n    this.gravity = false;\n    this.color = 'white';\n    this.radius = 2;\n    this.setHeading(angle);\n    this.setSpeed(speed);\n  }\n\n  Particle.prototype.getPos = function() {\n    return this.pos;\n  };\n\n  Particle.prototype.getSpeed = function() {\n    return Math.sqrt(Math.pow(this.velocity.x, 2), Math.pow(this.velocity.y, 2));\n  };\n\n  Particle.prototype.setSpeed = function(speed) {\n    var heading;\n    heading = this.getHeading();\n    this.velocity.x = Math.cos(heading) * speed;\n    return this.velocity.y = Math.sin(heading) * speed;\n  };\n\n  Particle.prototype.getHeading = function() {\n    return Math.atan2(this.velocity.y, this.velocity.x);\n  };\n\n  Particle.prototype.setHeading = function(heading) {\n    var speed;\n    speed = this.getSpeed();\n    this.velocity.x = Math.cos(heading) * speed;\n    return this.velocity.y = Math.sin(heading) * speed;\n  };\n\n  Particle.prototype.angleTo = function(other) {\n    return Math.atan2(other.pos.y - this.pos.y, other.pos.x - this.pos.x);\n  };\n\n  Particle.prototype.draw = function(ctx) {\n    ctx.globalAlpha = this.alpha;\n    ctx.save();\n    ctx.translate(this.pos.x, this.pos.y);\n    ctx.rotate(this.getHeading());\n    ctx.beginPath();\n    ctx.fillStyle = this.color;\n    ctx.polygon(0, 0, Math.min(this.radius * ((Math.abs(this.velocity.x) * Math.abs(this.velocity.y)) / 8), 6), 0);\n    ctx.fill();\n    ctx.restore();\n    return ctx.globalAlpha = 1;\n  };\n\n  Particle.prototype.render = function() {\n    this.update();\n    if (this.spring != null) {\n      return this.updateSpring(this.target);\n    }\n  };\n\n  Particle.prototype.update = function() {\n    this.velocity.x *= this.friction;\n    this.velocity.y *= this.friction;\n    this.pos.x += this.velocity.x;\n    return this.pos.y += this.velocity.y;\n  };\n\n  Particle.prototype.setSpring = function(target) {\n    this.target = target;\n    this.k = 0.1;\n    this.springLength = 0.8;\n    this.friction = 0.90;\n    return this.spring = true;\n  };\n\n  Particle.prototype.updateSpring = function() {\n    var ax, ay, distance, dx, dy, springForce;\n    dx = this.target.pos.x - this.pos.x;\n    dy = this.target.pos.y - this.pos.y;\n    distance = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n    springForce = (distance - this.springLength) * this.k;\n    ax = dx / distance * springForce;\n    ay = dy / distance * springForce;\n    this.velocity.x += ax;\n    return this.velocity.y += ay;\n  };\n\n  Particle.prototype.warp = function(target) {\n    if (Utils.distance(this, target) < target.getSpeed() * 10 && Utils.distance(this, this.target) < 30) {\n      this.setHeading(Utils.getAngle(target, this));\n      if (Utils.distance(this, target) < 70) {\n        return this.setSpeed(target.getSpeed());\n      }\n    }\n  };\n\n  return Particle;\n\n})();\n","\"use strict\";\nvar Player;\n\nmodule.exports = Player = (function() {\n  var setupControls;\n\n  function Player(playerNumber) {\n    this.playerNumber = playerNumber;\n    this.pos = {\n      x: 0,\n      y: 0\n    };\n    this.velocity = {\n      x: 0,\n      y: 0\n    };\n    this.friction = 0.9;\n    (setupControls.bind(this))();\n  }\n\n  setupControls = function() {\n    return void 0;\n  };\n\n  Player.prototype.update = function() {\n    return void 0;\n  };\n\n  Player.prototype.draw = function(ctx) {\n    return void 0;\n  };\n\n  return Player;\n\n})();\n","\"use strict\";\nvar Surface, WarpGrid;\n\nWarpGrid = require('src/WarpGrid');\n\nmodule.exports = Surface = (function() {\n  var registerResize, resizeScene;\n\n  function Surface(target) {\n    this.canvas = document.createElement('CANVAS');\n    target.appendChild(this.canvas);\n    this.context = this.canvas.getContext('2d');\n    this.objects = [];\n    this.setupComposer();\n    (registerResize.bind(this))();\n    (resizeScene.bind(this))(window);\n    this.grid = new WarpGrid(this.width(), this.height());\n    this.add(this.grid);\n    this.vignette = this.context.createRadialGradient(this.width() / 2, this.height() / 2, 100, this.width() / 2, this.height() / 2, this.width() / 2);\n    this.vignette.addColorStop(0, \"transparent\");\n    this.vignette.addColorStop(1, \"rgba(0, 0, 0, .4)\");\n  }\n\n  Surface.prototype.setupComposer = function() {\n    return console.log('[Surface] Setting up composer');\n  };\n\n  Surface.prototype.width = function() {\n    return this.canvas.width;\n  };\n\n  Surface.prototype.height = function() {\n    return this.canvas.height;\n  };\n\n  Surface.prototype.clear = function() {\n    return this.context.clearRect(0, 0, this.width(), this.height());\n  };\n\n  Surface.prototype.add = function(obj) {\n    return this.objects.push(obj);\n  };\n\n  Surface.prototype.render = function() {\n    var i, len, obj, ref;\n    this.context.save();\n    this.context.fillStyle = \"#20172a\";\n    this.context.fillRect(0, 0, this.width(), this.height());\n    ref = this.objects;\n    for (i = 0, len = ref.length; i < len; i++) {\n      obj = ref[i];\n      obj.draw(this.context);\n    }\n    this.context.restore();\n    this.context.fillStyle = this.vignette;\n    return this.context.fillRect(0, 0, this.width(), this.height());\n  };\n\n  resizeScene = function(win) {\n    var height, width;\n    console.log('[Surface] Resizing');\n    height = win.innerHeight;\n    width = win.innerWidth;\n    this.canvas.width = width;\n    return this.canvas.height = height;\n  };\n\n  registerResize = function() {\n    var _this;\n    _this = this;\n    return window.addEventListener('resize', function(e) {\n      return (resizeScene.bind(_this))(e.target);\n    });\n  };\n\n  return Surface;\n\n})();\n","\"use strict\";\nvar Utils;\n\nmodule.exports = Utils = (function() {\n  function Utils() {}\n\n  Utils.norm = function(val, min, max) {\n    return (val - min) / (max - min);\n  };\n\n  Utils.lerp = function(norm, min, max) {\n    return (max - min) * norm + min;\n  };\n\n  Utils.clamp = function(val, min, max) {\n    return Math.min(Math.max(value, max), min);\n  };\n\n  Utils.distance = function(left, right) {\n    var dx, dy;\n    dx = right.pos.x - left.pos.x;\n    dy = right.pos.y - left.pos.y;\n    return Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n  };\n\n  Utils.getAngle = function(left, right) {\n    var dx, dy;\n    dx = right.pos.x - left.pos.x;\n    dy = right.pos.y - left.pos.y;\n    return Math.atan2(dy, dx);\n  };\n\n  return Utils;\n\n})();\n","\"use strict\";\nvar Particle, WarpGrid;\n\nParticle = require('src/Particle');\n\nmodule.exports = WarpGrid = (function() {\n  WarpGrid.GRID_COUNT = 50;\n\n  WarpGrid.prototype.type = \"WarpGrid\";\n\n  function WarpGrid(size) {\n    var _this, i, j, particle, ref, ref1, row, x, y;\n    this.player = {\n      pos: {\n        x: -100,\n        y: -100\n      },\n      previous: {\n        x: -100,\n        y: -100\n      },\n      getSpeed: function() {\n        var dx, dy;\n        dx = this.previous.x - this.pos.x;\n        dy = this.previous.y - this.pos.y;\n        return Math.min(Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2)) / 6, 20);\n      }\n    };\n    this.particles = [];\n    for (y = i = 0, ref = WarpGrid.GRID_COUNT; 0 <= ref ? i <= ref : i >= ref; y = 0 <= ref ? ++i : --i) {\n      row = [];\n      for (x = j = 0, ref1 = WarpGrid.GRID_COUNT; 0 <= ref1 ? j <= ref1 : j >= ref1; x = 0 <= ref1 ? ++j : --j) {\n        particle = new Particle(x * (size / WarpGrid.GRID_COUNT), y * (size / WarpGrid.GRID_COUNT), 1, 0);\n        particle.target = {\n          pos: {\n            x: x * (size / WarpGrid.GRID_COUNT),\n            y: y * (size / WarpGrid.GRID_COUNT)\n          }\n        };\n        particle.setSpring(particle.target);\n        particle.k = 0.1;\n        particle.springLength = 0.1;\n        particle.friction = 0.9;\n        particle.radius = .5;\n        particle.color = '#a5d4de';\n        row.push(particle);\n      }\n      this.particles.push(row);\n    }\n    _this = this;\n    window.onmousemove = function(e) {\n      var posx, posy;\n      posx = e.clientX;\n      posy = e.clientY;\n      _this.player.previous.x = _this.player.pos.x;\n      _this.player.previous.y = _this.player.pos.y;\n      _this.player.pos.x = posx;\n      return _this.player.pos.y = posy;\n    };\n  }\n\n  WarpGrid.prototype.stopPlayer = function() {\n    this.player.previous.x = 0;\n    this.player.previous.y = 0;\n    this.player.pos.x = 0;\n    return this.player.pos.y = 0;\n  };\n\n  WarpGrid.prototype.draw = function(ctx) {\n    var bottom, i, particle, ref, results, right, x, y;\n    results = [];\n    for (y = i = 0, ref = WarpGrid.GRID_COUNT; 0 <= ref ? i <= ref : i >= ref; y = 0 <= ref ? ++i : --i) {\n      results.push((function() {\n        var j, ref1, results1;\n        results1 = [];\n        for (x = j = 0, ref1 = WarpGrid.GRID_COUNT; 0 <= ref1 ? j <= ref1 : j >= ref1; x = 0 <= ref1 ? ++j : --j) {\n          particle = this.particles[y][x];\n          right = null;\n          if (x + 1 <= WarpGrid.GRID_COUNT) {\n            right = this.particles[y][x + 1];\n          }\n          bottom = null;\n          if (y + 1 <= WarpGrid.GRID_COUNT) {\n            bottom = this.particles[y + 1][x];\n          }\n          ctx.lineWidth = 1;\n          ctx.globalAlpha = 0.1 + particle.getSpeed();\n          ctx.strokeStyle = '#2980b9';\n          if (right != null) {\n            ctx.beginPath();\n            ctx.moveTo(particle.pos.x, particle.pos.y);\n            ctx.lineTo(right.pos.x, right.pos.y);\n            ctx.closePath();\n            ctx.stroke();\n          }\n          if (bottom != null) {\n            ctx.beginPath();\n            ctx.moveTo(particle.pos.x, particle.pos.y);\n            ctx.lineTo(bottom.pos.x, bottom.pos.y);\n            ctx.closePath();\n            ctx.stroke();\n          }\n          ctx.globalAlpha = 1;\n          ctx.fillStyle = 'white';\n          particle.draw(ctx);\n          particle.render();\n          results1.push(particle.warp(this.player));\n        }\n        return results1;\n      }).call(this));\n    }\n    return results;\n  };\n\n  return WarpGrid;\n\n})();\n","/* jshint ignore:start */\n(function() {\n  var WebSocket = window.WebSocket || window.MozWebSocket;\n  var br = window.brunch = (window.brunch || {});\n  var ar = br['auto-reload'] = (br['auto-reload'] || {});\n  if (!WebSocket || ar.disabled) return;\n  if (window._ar) return;\n  window._ar = true;\n\n  var cacheBuster = function(url){\n    var date = Math.round(Date.now() / 1000).toString();\n    url = url.replace(/(\\&|\\\\?)cacheBuster=\\d*/, '');\n    return url + (url.indexOf('?') >= 0 ? '&' : '?') +'cacheBuster=' + date;\n  };\n\n  var browser = navigator.userAgent.toLowerCase();\n  var forceRepaint = ar.forceRepaint || browser.indexOf('chrome') > -1;\n\n  var reloaders = {\n    page: function(){\n      window.location.reload(true);\n    },\n\n    stylesheet: function(){\n      [].slice\n        .call(document.querySelectorAll('link[rel=stylesheet]'))\n        .filter(function(link) {\n          var val = link.getAttribute('data-autoreload');\n          return link.href && val != 'false';\n        })\n        .forEach(function(link) {\n          link.href = cacheBuster(link.href);\n        });\n\n      // Hack to force page repaint after 25ms.\n      if (forceRepaint) setTimeout(function() { document.body.offsetHeight; }, 25);\n    },\n\n    javascript: function(){\n      var scripts = [].slice.call(document.querySelectorAll('script'));\n      var textScripts = scripts.map(function(script) { return script.text }).filter(function(text) { return text.length > 0 });\n      var srcScripts = scripts.filter(function(script) { return script.src });\n\n      var loaded = 0;\n      var all = srcScripts.length;\n      var onLoad = function() {\n        loaded = loaded + 1;\n        if (loaded === all) {\n          textScripts.forEach(function(script) { eval(script); });\n        }\n      }\n\n      srcScripts\n        .forEach(function(script) {\n          var src = script.src;\n          script.remove();\n          var newScript = document.createElement('script');\n          newScript.src = cacheBuster(src);\n          newScript.async = true;\n          newScript.onload = onLoad;\n          document.head.appendChild(newScript);\n        });\n    }\n  };\n  var port = ar.port || 9485;\n  var host = br.server || window.location.hostname || 'localhost';\n\n  var connect = function(){\n    var connection = new WebSocket('ws://' + host + ':' + port);\n    connection.onmessage = function(event){\n      if (ar.disabled) return;\n      var message = event.data;\n      var reloader = reloaders[message] || reloaders.page;\n      reloader();\n    };\n    connection.onerror = function(){\n      if (connection.readyState) connection.close();\n    };\n    connection.onclose = function(){\n      window.setTimeout(connect, 1000);\n    };\n  };\n  connect();\n})();\n/* jshint ignore:end */\n"]}